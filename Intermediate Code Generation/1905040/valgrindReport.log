==4725== Memcheck, a memory error detector
==4725== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==4725== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==4725== Command: ./a.out noerror.c
==4725== Parent PID: 2113
==4725== 
==4725== Invalid read of size 8
==4725==    at 0x49B94F4: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==4725==    by 0x116744: bool std::operator==<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*) (in /home/asif/Documents/CSE 310 Offlines/Syntax & Semantics/1905040/a.out)
==4725==    by 0x10CDBC: yyparse() (in /home/asif/Documents/CSE 310 Offlines/Syntax & Semantics/1905040/a.out)
==4725==    by 0x1150A2: main (in /home/asif/Documents/CSE 310 Offlines/Syntax & Semantics/1905040/a.out)
==4725==  Address 0x48 is not stack'd, malloc'd or (recently) free'd
==4725== 
==4725== 
==4725== Process terminating with default action of signal 11 (SIGSEGV)
==4725==  Access not within mapped region at address 0x48
==4725==    at 0x49B94F4: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==4725==    by 0x116744: bool std::operator==<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*) (in /home/asif/Documents/CSE 310 Offlines/Syntax & Semantics/1905040/a.out)
==4725==    by 0x10CDBC: yyparse() (in /home/asif/Documents/CSE 310 Offlines/Syntax & Semantics/1905040/a.out)
==4725==    by 0x1150A2: main (in /home/asif/Documents/CSE 310 Offlines/Syntax & Semantics/1905040/a.out)
==4725==  If you believe this happened as a result of a stack
==4725==  overflow in your program's main thread (unlikely but
==4725==  possible), you can try to increase the size of the
==4725==  main thread stack using the --main-stacksize= flag.
==4725==  The main thread stack size used in this run was 8388608.
==4725== 
==4725== HEAP SUMMARY:
==4725==     in use at exit: 104,907 bytes in 39 blocks
==4725==   total heap usage: 58 allocs, 19 frees, 105,289 bytes allocated
==4725== 
==4725== 152 bytes in 1 blocks are definitely lost in loss record 22 of 31
==4725==    at 0x4845013: operator new(unsigned long) (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==4725==    by 0x10CD1B: yyparse() (in /home/asif/Documents/CSE 310 Offlines/Syntax & Semantics/1905040/a.out)
==4725==    by 0x1150A2: main (in /home/asif/Documents/CSE 310 Offlines/Syntax & Semantics/1905040/a.out)
==4725== 
==4725== LEAK SUMMARY:
==4725==    definitely lost: 152 bytes in 1 blocks
==4725==    indirectly lost: 0 bytes in 0 blocks
==4725==      possibly lost: 0 bytes in 0 blocks
==4725==    still reachable: 104,755 bytes in 38 blocks
==4725==         suppressed: 0 bytes in 0 blocks
==4725== Reachable blocks (those to which a pointer was found) are not shown.
==4725== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==4725== 
==4725== For lists of detected and suppressed errors, rerun with: -s
==4725== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
