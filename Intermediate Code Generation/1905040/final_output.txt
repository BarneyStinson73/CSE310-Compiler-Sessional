.MODEL SMALL
.STACK 1000H
.Data
	CR EQU 0DH
	LF EQU 0AH
	number DB "00000$"
 .CODE
i DW 1 DUP (0000H)
j DW 1 DUP (0000H)
main PROC
MOV AX, @DATA
MOV DS, AX
PUSH BP
MOV BP, SP
SUB SP, 2
SUB SP, 2
SUB SP, 2
SUB SP, 2
SUB SP, 2
SUB SP, 2
L1:
MOV AX,1
PUSH AX
POP AX
MOV i,AX
PUSH AX
L2:
MOV AX,i
CALL print_output
CALL new_line
L3:
MOV AX,5
PUSH AX
MOV AX,8
PUSH AX
POP BX
POP AX
ADD AX,BX
PUSH AX
POP AX
MOV j,AX
PUSH AX
L4:
MOV AX,j
CALL print_output
CALL new_line
L5:
MOV AX,i
PUSH AX
MOV AX,2
PUSH AX
MOV AX,j
PUSH AX
POP BX
POP AX
MUL BX
PUSH AX
POP BX
POP AX
ADD AX,BX
PUSH AX
POP AX
MOV [BP-2],AX
PUSH AX
L6:
MOV AX,[BP-2]
CALL print_output
CALL new_line
L7:
MOV AX,[BP-2]
PUSH AX
MOV AX,9
PUSH AX
POP BX
POP AX
CWD
DIV BX
MOV AX,DX
PUSH AX
POP AX
MOV [BP-6],AX
PUSH AX
L8:
MOV AX,[BP-6]
CALL print_output
CALL new_line
L9:
MOV AX,[BP-6]
PUSH AX
MOV AX,[BP-4]
PUSH AX
POP BX
POP AX
CMP AX,BX
JLE L10
JMP L11
L10:
MOV AX,1
JMP L12
L11:
MOV AX,0
L12:
PUSH AX
POP AX
MOV [BP-8],AX
PUSH AX
L13:
MOV AX,[BP-8]
CALL print_output
CALL new_line
L14:
MOV AX,i
PUSH AX
MOV AX,j
PUSH AX
POP BX
POP AX
CMP AX,BX
JNE L15
JMP L16
L15:
MOV AX,1
JMP L17
L16:
MOV AX,0
L17:
PUSH AX
POP AX
MOV [BP-10],AX
PUSH AX
L18:
MOV AX,[BP-10]
CALL print_output
CALL new_line
L19:
MOV AX,[BP-8]
PUSH AX
POP AX
CMP AX,0
JNE L21
JMP 20
L20:
MOV AX,[BP-10]
PUSH AX
POP AX
CMP AX,0JNE 
JMP L21
L21:L22
MOV AX,1
JMP L23
L22:
MOV AX,0
L23:
PUSH AX
POP AX
MOV [BP-12],AX
PUSH AX
L24:
MOV AX,[BP-12]
CALL print_output
CALL new_line
L25:
MOV AX,[BP-8]
PUSH AX
POP AX
CMP AX,0
JNE 
JMP 26
L26:L28
MOV AX,[BP-10]
PUSH AX
POP AX
CMP AX,0JNE 
JMP 
L27:L27
MOV AX,1L28
JMP L29
L28:
MOV AX,0
L29:
PUSH AX
POP AX
MOV [BP-12],AX
PUSH AX
L30:
MOV AX,[BP-12]
CALL print_output
CALL new_line
L31:
MOV AX,[BP-12]
PUSH AX
INC AX
MOV [BP-12],AX
L32:
MOV AX,[BP-12]
CALL print_output
CALL new_line
L33:
MOV AX,[BP-12]
PUSH AX
POP AX
NEG AX
PUSH AX
POP AX
MOV [BP-2],AX
PUSH AX
L34:
MOV AX,[BP-2]
CALL print_output
CALL new_line
L35:
MOV AX,0
PUSH AX
new_line proc
	push ax
	push dx
	mov ah,2
	mov dl,cr
	int 21h
	mov ah,2
	mov dl,lf
	int 21h
	pop dx
	pop ax
	ret
new_line endp
print_output proc  ;print what is in ax
	push ax
	push bx
	push cx
	push dx
	push si
	lea si,number
	mov bx,10
	add si,4
	cmp ax,0
	jnge negate
	print:
	xor dx,dx
	div bx
	mov [si],dl
	add [si],'0'
	dec si
	cmp ax,0
	jne print
	inc si
	lea dx,si
	mov ah,9
	int 21h
	pop si
	pop dx
	pop cx
	pop bx
	pop ax
	ret
	negate:
	push ax
	mov ah,2
	mov dl,'-'
	int 21h
	pop ax
	neg ax
	jmp print
print_output endp
END main
